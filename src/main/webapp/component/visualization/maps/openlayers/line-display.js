/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
import React from 'react';
import DistanceUtils from '../../../../js/DistanceUtils';
import ol from 'openlayers';
import _ from 'underscore';
import * as Turf from '@turf/turf';
import { validateGeo } from '../../../../react-component/utils/validation';
import { useListenTo } from '../../../selection-checkbox/useBackbone.hook';
import { removeOldDrawing } from './drawing-and-display';
import { getIdFromModelForDisplay } from '../drawing-and-display';
import { StartupDataStore } from '../../../../js/model/Startup/startup';
import { contrastingColor } from '../../../../react-component/location/location-color-selector';
export function translateFromOpenlayersCoordinates(coords) {
    var coordinates = [];
    coords.forEach(function (point) {
        point = ol.proj.transform([
            DistanceUtils.coordinateRound(point[0]),
            DistanceUtils.coordinateRound(point[1]),
        ], StartupDataStore.Configuration.getProjection(), 'EPSG:4326');
        if (point[1] > 90) {
            point[1] = 89.9;
        }
        else if (point[1] < -90) {
            point[1] = -89.9;
        }
        coordinates.push(point);
    });
    return coordinates;
}
export function translateToOpenlayersCoordinates(coords) {
    var coordinates = [];
    coords.forEach(function (item) {
        if (item[0].constructor === Array) {
            coordinates.push(translateToOpenlayersCoordinates(item));
        }
        else {
            coordinates.push(ol.proj.transform([item[0], item[1]], 'EPSG:4326', StartupDataStore.Configuration.getProjection()));
        }
    });
    return coordinates;
}
var modelToLineString = function (model) {
    var line = model.get('line');
    var setArr = _.uniq(line);
    if (setArr.length < 2) {
        return;
    }
    return new ol.geom.LineString(translateToOpenlayersCoordinates(setArr));
};
var adjustLinePoints = function (line) {
    var extent = line.getExtent();
    var lon1 = extent[0];
    var lon2 = extent[2];
    var width = Math.abs(lon2 - lon1);
    if (width > 180) {
        var adjusted = line.getCoordinates();
        adjusted.forEach(function (coord) {
            if (coord[0] < 0) {
                coord[0] += 360;
            }
        });
        line.setCoordinates(adjusted);
    }
};
var adjustMultiLinePoints = function (lines) {
    var adjusted = [];
    lines.getLineStrings().forEach(function (line) {
        adjustLinePoints(line);
        adjusted.push(line.getCoordinates());
    });
    lines.setCoordinates(adjusted);
};
export var drawLine = function (_a) {
    var map = _a.map, model = _a.model, line = _a.line, id = _a.id, isInteractive = _a.isInteractive, translation = _a.translation;
    if (!line) {
        // Handles case where model changes to empty vars and we don't want to draw anymore
        return;
    }
    var lineWidth = DistanceUtils.getDistanceInMeters(model.get('lineWidth'), model.get('lineUnits')) || 1;
    if (translation) {
        line.translate(translation.longitude, translation.latitude);
    }
    adjustLinePoints(line);
    var turfLine = Turf.lineString(translateFromOpenlayersCoordinates(line.getCoordinates()));
    var bufferedLine = Turf.buffer(turfLine, lineWidth, { units: 'meters' });
    var geometryRepresentation = new ol.geom.MultiLineString(translateToOpenlayersCoordinates(bufferedLine.geometry.coordinates));
    var drawnGeometryRepresentation = new ol.geom.LineString(translateToOpenlayersCoordinates(turfLine.geometry.coordinates));
    // need to adjust the points again AFTER buffering, since buffering undoes the antimeridian adjustments
    adjustMultiLinePoints(geometryRepresentation);
    var billboard = new ol.Feature({
        geometry: geometryRepresentation,
    });
    billboard.setId(id);
    billboard.set('locationId', model.get('locationId'));
    var drawnLineFeature = new ol.Feature({
        geometry: drawnGeometryRepresentation,
    });
    var color = model.get('color');
    var iconStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: isInteractive ? contrastingColor : color ? color : '#914500',
            width: isInteractive ? 6 : 4,
        }),
    });
    var drawnLineIconStyle = new ol.style.Style({
        stroke: new ol.style.Stroke({
            color: isInteractive ? contrastingColor : color ? color : '#914500',
            width: 2,
            lineDash: [10, 5],
        }),
    });
    billboard.setStyle(iconStyle);
    drawnLineFeature.setStyle(drawnLineIconStyle);
    var vectorSource = new ol.source.Vector({
        features: [billboard, drawnLineFeature],
    });
    var vectorLayer = new ol.layer.Vector({
        source: vectorSource,
    });
    vectorLayer.set('id', id);
    var mapRef = map.getMap();
    removeOldDrawing({ map: mapRef, id: id });
    map.getMap().addLayer(vectorLayer);
};
var updatePrimitive = function (_a) {
    var _b;
    var map = _a.map, model = _a.model, id = _a.id, isInteractive = _a.isInteractive, translation = _a.translation;
    var line = modelToLineString(model);
    // Make sure the current model has width and height before drawing
    if (line !== undefined &&
        !((_b = validateGeo('line', JSON.stringify(line.getCoordinates()))) === null || _b === void 0 ? void 0 : _b.error)) {
        drawLine({ map: map, model: model, line: line, id: id, isInteractive: isInteractive, translation: translation });
    }
};
var useListenToLineModel = function (_a) {
    var model = _a.model, map = _a.map, isInteractive = _a.isInteractive, translation = _a.translation;
    var callback = React.useMemo(function () {
        return function () {
            if (model && map) {
                updatePrimitive({
                    map: map,
                    model: model,
                    id: getIdFromModelForDisplay({ model: model }),
                    isInteractive: isInteractive,
                    translation: translation,
                });
            }
        };
    }, [model, map, isInteractive, translation]);
    useListenTo(model, 'change:line change:lineWidth change:lineUnits', callback);
    callback();
};
export var OpenlayersLineDisplay = function (_a) {
    var map = _a.map, model = _a.model, isInteractive = _a.isInteractive, translation = _a.translation;
    useListenToLineModel({ map: map, model: model, isInteractive: isInteractive, translation: translation });
    React.useEffect(function () {
        return function () {
            if (map && model) {
                removeOldDrawing({
                    map: map.getMap(),
                    id: getIdFromModelForDisplay({ model: model }),
                });
            }
        };
    }, [map, model]);
    return React.createElement(React.Fragment, null);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGluZS1kaXNwbGF5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudC92aXN1YWxpemF0aW9uL21hcHMvb3BlbmxheWVycy9saW5lLWRpc3BsYXkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7O0lBYUk7QUFDSixPQUFPLEtBQUssTUFBTSxPQUFPLENBQUE7QUFDekIsT0FBTyxhQUFhLE1BQU0sOEJBQThCLENBQUE7QUFDeEQsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQzNCLE9BQU8sQ0FBQyxNQUFNLFlBQVksQ0FBQTtBQUMxQixPQUFPLEtBQUssSUFBSSxNQUFNLFlBQVksQ0FBQTtBQUNsQyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOENBQThDLENBQUE7QUFDMUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhDQUE4QyxDQUFBO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHdCQUF3QixDQUFBO0FBQ2pFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFBO0FBQ3ZFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhEQUE4RCxDQUFBO0FBSS9GLE1BQU0sVUFBVSxrQ0FBa0MsQ0FBQyxNQUF1QjtJQUN4RSxJQUFNLFdBQVcsR0FBRyxFQUFxQixDQUFBO0lBQ3pDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBQyxLQUFLO1FBQ25CLEtBQUssR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FDdkI7WUFDRSxhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2QyxhQUFhLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN4QyxFQUNELGdC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QUEsRUFBRSxDQUFDLENBQUE7SUFDaEUsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNkLE9BQU87WUFDTCxJQUFJLEdBQUcsSUFBSSxLQUFLLEVBQUU7Z0JBQ2hCLGdCQUFnQixDQUFDO29CQUNmLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxFQUFFO29CQUNqQixFQUFFLEVBQUUsd0JBQXdCLENBQUMsRUFBRSxLQUFLLE9BQUEsRUFBRSxDQUFDO2lCQUN4QyxDQUFDLENBQUE7YUFDSDtRQUNILENBQUMsQ0FBQTtJQUNILENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBQ2hCLE9BQU8seUNBQUssQ0FBQTtBQUNkLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBDb2RpY2UgRm91bmRhdGlvblxuICpcbiAqIFRoaXMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBMZXNzZXJcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5IHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlXG4gKiBMaWNlbnNlLCBvciBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0XG4gKiBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gU2VlIHRoZSBHTlVcbiAqIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuIEEgY29weSBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBpcyBkaXN0cmlidXRlZCBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbSBhbmQgY2FuIGJlIGZvdW5kIGF0XG4gKiA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2xncGwuaHRtbD4uXG4gKlxuICoqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IERpc3RhbmNlVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vanMvRGlzdGFuY2VVdGlscydcbmltcG9ydCBvbCBmcm9tICdvcGVubGF5ZXJzJ1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSdcbmltcG9ydCAqIGFzIFR1cmYgZnJvbSAnQHR1cmYvdHVyZidcbmltcG9ydCB7IHZhbGlkYXRlR2VvIH0gZnJvbSAnLi4vLi4vLi4vLi4vcmVhY3QtY29tcG9uZW50L3V0aWxzL3ZhbGlkYXRpb24nXG5pbXBvcnQgeyB1c2VMaXN0ZW5UbyB9IGZyb20gJy4uLy4uLy4uL3NlbGVjdGlvbi1jaGVja2JveC91c2VCYWNrYm9uZS5ob29rJ1xuaW1wb3J0IHsgcmVtb3ZlT2xkRHJhd2luZyB9IGZyb20gJy4vZHJhd2luZy1hbmQtZGlzcGxheSdcbmltcG9ydCB7IGdldElkRnJvbU1vZGVsRm9yRGlzcGxheSB9IGZyb20gJy4uL2RyYXdpbmctYW5kLWRpc3BsYXknXG5pbXBvcnQgeyBTdGFydHVwRGF0YVN0b3JlIH0gZnJvbSAnLi4vLi4vLi4vLi4vanMvbW9kZWwvU3RhcnR1cC9zdGFydHVwJ1xuaW1wb3J0IHsgY29udHJhc3RpbmdDb2xvciB9IGZyb20gJy4uLy4uLy4uLy4uL3JlYWN0LWNvbXBvbmVudC9sb2NhdGlvbi9sb2NhdGlvbi1jb2xvci1zZWxlY3RvcidcbmltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vaW50ZXJhY3Rpb25zLnByb3ZpZGVyJ1xudHlwZSBDb29yZGluYXRlVHlwZSA9IFtudW1iZXIsIG51bWJlcl1cbnR5cGUgQ29vcmRpbmF0ZXNUeXBlID0gQXJyYXk8Q29vcmRpbmF0ZVR5cGU+XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlRnJvbU9wZW5sYXllcnNDb29yZGluYXRlcyhjb29yZHM6IENvb3JkaW5hdGVzVHlwZSkge1xuICBjb25zdCBjb29yZGluYXRlcyA9IFtdIGFzIENvb3JkaW5hdGVzVHlwZVxuICBjb29yZHMuZm9yRWFjaCgocG9pbnQpID0+IHtcbiAgICBwb2ludCA9IG9sLnByb2oudHJhbnNmb3JtKFxuICAgICAgW1xuICAgICAgICBEaXN0YW5jZVV0aWxzLmNvb3JkaW5hdGVSb3VuZChwb2ludFswXSksXG4gICAgICAgIERpc3RhbmNlVXRpbHMuY29vcmRpbmF0ZVJvdW5kKHBvaW50WzFdKSxcbiAgICAgIF0sXG4gICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0UHJvamVjdGlvbigpLFxuICAgICAgJ0VQU0c6NDMyNidcbiAgICApXG4gICAgaWYgKHBvaW50WzFdID4gOTApIHtcbiAgICAgIHBvaW50WzFdID0gODkuOVxuICAgIH0gZWxzZSBpZiAocG9pbnRbMV0gPCAtOTApIHtcbiAgICAgIHBvaW50WzFdID0gLTg5LjlcbiAgICB9XG4gICAgY29vcmRpbmF0ZXMucHVzaChwb2ludClcbiAgfSlcbiAgcmV0dXJuIGNvb3JkaW5hdGVzXG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlVG9PcGVubGF5ZXJzQ29vcmRpbmF0ZXMoY29vcmRzOiBDb29yZGluYXRlc1R5cGUpIHtcbiAgY29uc3QgY29vcmRpbmF0ZXMgPSBbXSBhcyBDb29yZGluYXRlc1R5cGVcbiAgY29vcmRzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbVswXS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2goXG4gICAgICAgIHRyYW5zbGF0ZVRvT3BlbmxheWVyc0Nvb3JkaW5hdGVzKFxuICAgICAgICAgIGl0ZW0gYXMgdW5rbm93biBhcyBDb29yZGluYXRlc1R5cGVcbiAgICAgICAgKSBhcyB1bmtub3duIGFzIENvb3JkaW5hdGVUeXBlXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2goXG4gICAgICAgIG9sLnByb2oudHJhbnNmb3JtKFxuICAgICAgICAgIFtpdGVtWzBdLCBpdGVtWzFdXSxcbiAgICAgICAgICAnRVBTRzo0MzI2JyxcbiAgICAgICAgICBTdGFydHVwRGF0YVN0b3JlLkNvbmZpZ3VyYXRpb24uZ2V0UHJvamVjdGlvbigpXG4gICAgICAgIClcbiAgICAgIClcbiAgICB9XG4gIH0pXG4gIHJldHVybiBjb29yZGluYXRlc1xufVxuY29uc3QgbW9kZWxUb0xpbmVTdHJpbmcgPSAobW9kZWw6IGFueSkgPT4ge1xuICBjb25zdCBsaW5lID0gbW9kZWwuZ2V0KCdsaW5lJylcbiAgY29uc3Qgc2V0QXJyID0gXy51bmlxKGxpbmUpXG4gIGlmIChzZXRBcnIubGVuZ3RoIDwgMikge1xuICAgIHJldHVyblxuICB9XG4gIHJldHVybiBuZXcgb2wuZ2VvbS5MaW5lU3RyaW5nKHRyYW5zbGF0ZVRvT3BlbmxheWVyc0Nvb3JkaW5hdGVzKHNldEFycikpXG59XG5jb25zdCBhZGp1c3RMaW5lUG9pbnRzID0gKGxpbmU6IG9sLmdlb20uTGluZVN0cmluZykgPT4ge1xuICBjb25zdCBleHRlbnQgPSBsaW5lLmdldEV4dGVudCgpXG4gIGNvbnN0IGxvbjEgPSBleHRlbnRbMF1cbiAgY29uc3QgbG9uMiA9IGV4dGVudFsyXVxuICBjb25zdCB3aWR0aCA9IE1hdGguYWJzKGxvbjIgLSBsb24xKVxuICBpZiAod2lkdGggPiAxODApIHtcbiAgICBjb25zdCBhZGp1c3RlZCA9IGxpbmUuZ2V0Q29vcmRpbmF0ZXMoKVxuICAgIGFkanVzdGVkLmZvckVhY2goKGNvb3JkKSA9PiB7XG4gICAgICBpZiAoY29vcmRbMF0gPCAwKSB7XG4gICAgICAgIGNvb3JkWzBdICs9IDM2MFxuICAgICAgfVxuICAgIH0pXG4gICAgbGluZS5zZXRDb29yZGluYXRlcyhhZGp1c3RlZClcbiAgfVxufVxuY29uc3QgYWRqdXN0TXVsdGlMaW5lUG9pbnRzID0gKGxpbmVzOiBvbC5nZW9tLk11bHRpTGluZVN0cmluZykgPT4ge1xuICBjb25zdCBhZGp1c3RlZDogb2wuQ29vcmRpbmF0ZVtdW10gPSBbXVxuICBsaW5lcy5nZXRMaW5lU3RyaW5ncygpLmZvckVhY2goKGxpbmUpID0+IHtcbiAgICBhZGp1c3RMaW5lUG9pbnRzKGxpbmUpXG4gICAgYWRqdXN0ZWQucHVzaChsaW5lLmdldENvb3JkaW5hdGVzKCkpXG4gIH0pXG4gIGxpbmVzLnNldENvb3JkaW5hdGVzKGFkanVzdGVkKVxufVxuZXhwb3J0IGNvbnN0IGRyYXdMaW5lID0gKHtcbiAgbWFwLFxuICBtb2RlbCxcbiAgbGluZSxcbiAgaWQsXG4gIGlzSW50ZXJhY3RpdmUsXG4gIHRyYW5zbGF0aW9uLFxufToge1xuICBtYXA6IGFueVxuICBtb2RlbDogYW55XG4gIGxpbmU6IG9sLmdlb20uTGluZVN0cmluZ1xuICBpZDogc3RyaW5nXG4gIGlzSW50ZXJhY3RpdmU/OiBib29sZWFuXG4gIHRyYW5zbGF0aW9uPzogVHJhbnNsYXRpb25cbn0pID0+IHtcbiAgaWYgKCFsaW5lKSB7XG4gICAgLy8gSGFuZGxlcyBjYXNlIHdoZXJlIG1vZGVsIGNoYW5nZXMgdG8gZW1wdHkgdmFycyBhbmQgd2UgZG9uJ3Qgd2FudCB0byBkcmF3IGFueW1vcmVcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBsaW5lV2lkdGggPVxuICAgIERpc3RhbmNlVXRpbHMuZ2V0RGlzdGFuY2VJbk1ldGVycyhcbiAgICAgIG1vZGVsLmdldCgnbGluZVdpZHRoJyksXG4gICAgICBtb2RlbC5nZXQoJ2xpbmVVbml0cycpXG4gICAgKSB8fCAxXG4gIGlmICh0cmFuc2xhdGlvbikge1xuICAgIGxpbmUudHJhbnNsYXRlKHRyYW5zbGF0aW9uLmxvbmdpdHVkZSwgdHJhbnNsYXRpb24ubGF0aXR1ZGUpXG4gIH1cbiAgYWRqdXN0TGluZVBvaW50cyhsaW5lKVxuICBjb25zdCB0dXJmTGluZSA9IFR1cmYubGluZVN0cmluZyhcbiAgICB0cmFuc2xhdGVGcm9tT3BlbmxheWVyc0Nvb3JkaW5hdGVzKGxpbmUuZ2V0Q29vcmRpbmF0ZXMoKSlcbiAgKVxuICBjb25zdCBidWZmZXJlZExpbmUgPSBUdXJmLmJ1ZmZlcih0dXJmTGluZSwgbGluZVdpZHRoLCB7IHVuaXRzOiAnbWV0ZXJzJyB9KVxuICBjb25zdCBnZW9tZXRyeVJlcHJlc2VudGF0aW9uID0gbmV3IG9sLmdlb20uTXVsdGlMaW5lU3RyaW5nKFxuICAgIHRyYW5zbGF0ZVRvT3BlbmxheWVyc0Nvb3JkaW5hdGVzKFxuICAgICAgYnVmZmVyZWRMaW5lLmdlb21ldHJ5LmNvb3JkaW5hdGVzIGFzIGFueVxuICAgICkgYXMgdW5rbm93biBhcyBhbnlcbiAgKVxuICBjb25zdCBkcmF3bkdlb21ldHJ5UmVwcmVzZW50YXRpb24gPSBuZXcgb2wuZ2VvbS5MaW5lU3RyaW5nKFxuICAgIHRyYW5zbGF0ZVRvT3BlbmxheWVyc0Nvb3JkaW5hdGVzKFxuICAgICAgdHVyZkxpbmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMgYXMgYW55XG4gICAgKSBhcyB1bmtub3duIGFzIGFueVxuICApXG4gIC8vIG5lZWQgdG8gYWRqdXN0IHRoZSBwb2ludHMgYWdhaW4gQUZURVIgYnVmZmVyaW5nLCBzaW5jZSBidWZmZXJpbmcgdW5kb2VzIHRoZSBhbnRpbWVyaWRpYW4gYWRqdXN0bWVudHNcbiAgYWRqdXN0TXVsdGlMaW5lUG9pbnRzKGdlb21ldHJ5UmVwcmVzZW50YXRpb24pXG4gIGNvbnN0IGJpbGxib2FyZCA9IG5ldyBvbC5GZWF0dXJlKHtcbiAgICBnZW9tZXRyeTogZ2VvbWV0cnlSZXByZXNlbnRhdGlvbixcbiAgfSlcbiAgYmlsbGJvYXJkLnNldElkKGlkKVxuICBiaWxsYm9hcmQuc2V0KCdsb2NhdGlvbklkJywgbW9kZWwuZ2V0KCdsb2NhdGlvbklkJykpXG4gIGNvbnN0IGRyYXduTGluZUZlYXR1cmUgPSBuZXcgb2wuRmVhdHVyZSh7XG4gICAgZ2VvbWV0cnk6IGRyYXduR2VvbWV0cnlSZXByZXNlbnRhdGlvbixcbiAgfSlcbiAgY29uc3QgY29sb3IgPSBtb2RlbC5nZXQoJ2NvbG9yJylcbiAgY29uc3QgaWNvblN0eWxlID0gbmV3IG9sLnN0eWxlLlN0eWxlKHtcbiAgICBzdHJva2U6IG5ldyBvbC5zdHlsZS5TdHJva2Uoe1xuICAgICAgY29sb3I6IGlzSW50ZXJhY3RpdmUgPyBjb250cmFzdGluZ0NvbG9yIDogY29sb3IgPyBjb2xvciA6ICcjOTE0NTAwJyxcbiAgICAgIHdpZHRoOiBpc0ludGVyYWN0aXZlID8gNiA6IDQsXG4gICAgfSksXG4gIH0pXG4gIGNvbnN0IGRyYXduTGluZUljb25TdHlsZSA9IG5ldyBvbC5zdHlsZS5TdHlsZSh7XG4gICAgc3Ryb2tlOiBuZXcgb2wuc3R5bGUuU3Ryb2tlKHtcbiAgICAgIGNvbG9yOiBpc0ludGVyYWN0aXZlID8gY29udHJhc3RpbmdDb2xvciA6IGNvbG9yID8gY29sb3IgOiAnIzkxNDUwMCcsXG4gICAgICB3aWR0aDogMixcbiAgICAgIGxpbmVEYXNoOiBbMTAsIDVdLFxuICAgIH0pLFxuICB9KVxuICBiaWxsYm9hcmQuc2V0U3R5bGUoaWNvblN0eWxlKVxuICBkcmF3bkxpbmVGZWF0dXJlLnNldFN0eWxlKGRyYXduTGluZUljb25TdHlsZSlcbiAgY29uc3QgdmVjdG9yU291cmNlID0gbmV3IG9sLnNvdXJjZS5WZWN0b3Ioe1xuICAgIGZlYXR1cmVzOiBbYmlsbGJvYXJkLCBkcmF3bkxpbmVGZWF0dXJlXSxcbiAgfSlcbiAgbGV0IHZlY3RvckxheWVyID0gbmV3IG9sLmxheWVyLlZlY3Rvcih7XG4gICAgc291cmNlOiB2ZWN0b3JTb3VyY2UsXG4gIH0pXG4gIHZlY3RvckxheWVyLnNldCgnaWQnLCBpZClcbiAgY29uc3QgbWFwUmVmID0gbWFwLmdldE1hcCgpIGFzIG9sLk1hcFxuICByZW1vdmVPbGREcmF3aW5nKHsgbWFwOiBtYXBSZWYsIGlkIH0pXG4gIG1hcC5nZXRNYXAoKS5hZGRMYXllcih2ZWN0b3JMYXllcilcbn1cbmNvbnN0IHVwZGF0ZVByaW1pdGl2ZSA9ICh7XG4gIG1hcCxcbiAgbW9kZWwsXG4gIGlkLFxuICBpc0ludGVyYWN0aXZlLFxuICB0cmFuc2xhdGlvbixcbn06IHtcbiAgbWFwOiBhbnlcbiAgbW9kZWw6IGFueVxuICBpZDogc3RyaW5nXG4gIGlzSW50ZXJhY3RpdmU/OiBib29sZWFuXG4gIHRyYW5zbGF0aW9uPzogVHJhbnNsYXRpb25cbn0pID0+IHtcbiAgY29uc3QgbGluZSA9IG1vZGVsVG9MaW5lU3RyaW5nKG1vZGVsKVxuICAvLyBNYWtlIHN1cmUgdGhlIGN1cnJlbnQgbW9kZWwgaGFzIHdpZHRoIGFuZCBoZWlnaHQgYmVmb3JlIGRyYXdpbmdcbiAgaWYgKFxuICAgIGxpbmUgIT09IHVuZGVmaW5lZCAmJlxuICAgICF2YWxpZGF0ZUdlbygnbGluZScsIEpTT04uc3RyaW5naWZ5KGxpbmUuZ2V0Q29vcmRpbmF0ZXMoKSkpPy5lcnJvclxuICApIHtcbiAgICBkcmF3TGluZSh7IG1hcCwgbW9kZWwsIGxpbmUsIGlkLCBpc0ludGVyYWN0aXZlLCB0cmFuc2xhdGlvbiB9KVxuICB9XG59XG5jb25zdCB1c2VMaXN0ZW5Ub0xpbmVNb2RlbCA9ICh7XG4gIG1vZGVsLFxuICBtYXAsXG4gIGlzSW50ZXJhY3RpdmUsXG4gIHRyYW5zbGF0aW9uLFxufToge1xuICBtb2RlbDogYW55XG4gIG1hcDogYW55XG4gIGlzSW50ZXJhY3RpdmU/OiBib29sZWFuXG4gIHRyYW5zbGF0aW9uPzogVHJhbnNsYXRpb25cbn0pID0+IHtcbiAgY29uc3QgY2FsbGJhY2sgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1vZGVsICYmIG1hcCkge1xuICAgICAgICB1cGRhdGVQcmltaXRpdmUoe1xuICAgICAgICAgIG1hcCxcbiAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICBpZDogZ2V0SWRGcm9tTW9kZWxGb3JEaXNwbGF5KHsgbW9kZWwgfSksXG4gICAgICAgICAgaXNJbnRlcmFjdGl2ZSxcbiAgICAgICAgICB0cmFuc2xhdGlvbixcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9XG4gIH0sIFttb2RlbCwgbWFwLCBpc0ludGVyYWN0aXZlLCB0cmFuc2xhdGlvbl0pXG4gIHVzZUxpc3RlblRvKG1vZGVsLCAnY2hhbmdlOmxpbmUgY2hhbmdlOmxpbmVXaWR0aCBjaGFuZ2U6bGluZVVuaXRzJywgY2FsbGJhY2spXG4gIGNhbGxiYWNrKClcbn1cbmV4cG9ydCBjb25zdCBPcGVubGF5ZXJzTGluZURpc3BsYXkgPSAoe1xuICBtYXAsXG4gIG1vZGVsLFxuICBpc0ludGVyYWN0aXZlLFxuICB0cmFuc2xhdGlvbixcbn06IHtcbiAgbWFwOiBhbnlcbiAgbW9kZWw6IGFueVxuICBpc0ludGVyYWN0aXZlPzogYm9vbGVhblxuICB0cmFuc2xhdGlvbj86IFRyYW5zbGF0aW9uXG59KSA9PiB7XG4gIHVzZUxpc3RlblRvTGluZU1vZGVsKHsgbWFwLCBtb2RlbCwgaXNJbnRlcmFjdGl2ZSwgdHJhbnNsYXRpb24gfSlcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKG1hcCAmJiBtb2RlbCkge1xuICAgICAgICByZW1vdmVPbGREcmF3aW5nKHtcbiAgICAgICAgICBtYXA6IG1hcC5nZXRNYXAoKSxcbiAgICAgICAgICBpZDogZ2V0SWRGcm9tTW9kZWxGb3JEaXNwbGF5KHsgbW9kZWwgfSksXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICB9LCBbbWFwLCBtb2RlbF0pXG4gIHJldHVybiA8PjwvPlxufVxuIl19